import sys

import pygame

from bullet import Bullet
from dog import Dog

def check_keydown_events(event, game_settings, screen, cat, bullets):
    """Response to keystroke presses."""
    # Moving cat in different directions:
    if event.key == pygame.K_RIGHT:
        cat.moving_right = True
    elif event.key == pygame.K_LEFT:    
        cat.moving_left = True
    elif event.key == pygame.K_UP:
        cat.moving_up = True
    elif event.key == pygame.K_DOWN:
        cat.moving_down = True

    elif event.key == pygame.K_SPACE:
        # Create and add new bullet to bullets' group.
        if len(bullets) < game_settings.bullets_allowed:
            new_bullet = Bullet(game_settings, screen, cat)
            bullets.add(new_bullet)
    elif event.key == pygame.K_ESCAPE:
        # Exit game after press 'escape'.
        sys.exit()

def check_keyup_events(event, cat):
    """Reaction to key release."""
    if event.key == pygame.K_RIGHT:
        cat.moving_right = False
    elif event.key == pygame.K_LEFT:
        cat.moving_left = False
    elif event.key == pygame.K_UP:
        cat.moving_up = False
    elif event.key == pygame.K_DOWN:
        cat.moving_down = False


def check_events(game_settings, screen, cat, bullets):
    """Reaction to events generated by heyboard and mouse."""

    # Waiting for a keystroke or mouse button to be pressed.
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

        elif event.type == pygame.KEYDOWN:
            check_keydown_events(event, game_settings, screen, cat, bullets)
        
        elif event.type == pygame.KEYUP:
            check_keyup_events(event, cat)

def update_screen(game_settings, screen, cat, bullets, dogs):
    """Update images on screen and go to new screen."""
    # Refreshing the screen during each loop iteration.
    screen.fill(game_settings.bg_color)

    # Repeat the display of all bullets under cat and dogs.
    for bullet in bullets.sprites():
        bullet.draw_bullet()

    cat.blitme()
    dogs.draw(screen)

    # Display last modified screen.
    pygame.display.flip()

def update_bullets(bullets, dogs):
    """Update the position of bullets and remove those that are not visible on the screen."""
    # Update bulltes' position.
    bullets.update()

    # Deleted bullets which are outside screen.
    for bullet in bullets.copy():
        if bullet.rect.left > 1500:
            bullets.remove(bullet)
    # Deleted dog and bullet after collision.
    collisions = pygame.sprite.groupcollide(bullets, dogs, True, True) # Iteracja przez wszystkie pociski i psy

def create_pack(game_settings, screen, dogs):
    """Create pack of dogs."""
    # Create dog and decision number of dogs.
    # Distance between dogs.
    dog = Dog(game_settings, screen)
    dog_height = dog.rect.height
    available_space_y = game_settings.screen_height
    number_dogs_y = 3
    number_rows = 5

    # Create pack of dogs.
    for row_number in range(number_rows):
        for dog_number in range(number_dogs_y):
            # Create dog and placing it in row.
            dog = Dog(game_settings, screen)
            dog.y = dog_height + 2 * dog_height * dog_number
            dog.rect.y = dog.y
            dog.rect.x = 2 * dog.rect.width * row_number + 1000
            dogs.add(dog)

def check_pack_edges(game_settings, dogs):
        """Reaction when a dog reaches the edge of the screen.."""
        for dog in dogs.sprites():
            if dog.check_edges():
                change_pack_direction(game_settings, dogs)
                break

def change_pack_direction(game_settings, dogs):
    """Move the pack to the bottom and change direction."""
    for dog in dogs.sprites():
        dog.rect.x -= game_settings.pack_drop_speed
    game_settings.pack_direction *= -1

def update_dogs(game_settings, dogs):
    """Checking if the pack is at the edge of the screen, 
    and then update the location of all dogs."""
    check_pack_edges(game_settings, dogs)
    dogs.update()
    
    # Detection of a collision between a cat and dog.